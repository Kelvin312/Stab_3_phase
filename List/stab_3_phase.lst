
AVRASM ver. 2.1.30  C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm Tue Aug 11 16:09:07 2015

C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1072): warning: Register r5 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1073): warning: Register r4 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1074): warning: Register r7 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1075): warning: Register r6 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1076): warning: Register r9 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1077): warning: Register r8 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1078): warning: Register r11 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1079): warning: Register r10 already defined by the .DEF directive
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1080): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.7 Evaluation
                 ;(C) Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF _adc_wr_input=R11
                 	.DEF _adc_rd_input=R10
                 	.DEF _tempValue=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 014d 	JMP  _timer2_comp_isr
000008 940c 0145 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0141 	JMP  _timer1_compa_isr
00000e 940c 0000 	JMP  0x00
000010 940c 013a 	JMP  _timer1_ovf_isr
000012 940c 012e 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0074 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 00a3 	JMP  _usart_tx_isr
00001c 940c 0151 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0136 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000      	.DB  0x0,0x0
                 
                 _0x14:
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1126): warning: .cseg .db misalignment - padding zero byte
000035 0001      	.DB  0x1
                 _0x15:
C:\Documents and Settings\Админ\Рабочий стол\Stab_3_phase\List\stab_3_phase.asm(1128): warning: .cseg .db misalignment - padding zero byte
000036 002f      	.DB  0x2F
                 
                 __GLOBAL_INI_TBL:
000037 0001      	.DW  0x01
000038 0002      	.DW  0x02
000039 0066      	.DW  __REG_BIT_VARS*2
                 
00003a 0002      	.DW  0x02
00003b 000a      	.DW  0x0A
00003c 0068      	.DW  __REG_VARS*2
                 
00003d 0001      	.DW  0x01
00003e 01b5      	.DW  _isEnable
00003f 006a      	.DW  _0x14*2
                 
000040 0001      	.DW  0x01
000041 01b6      	.DW  _timeReg
000042 006c      	.DW  _0x15*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004b e1f8      	LDI  R31,0x18
00004c bdf1      	OUT  WDTCR,R31
00004d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 0271 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 04.08.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 32
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004D {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000074 d25d      	RCALL SUBOPT_0x0
                 ; 0000 004E char status,data;
                 ; 0000 004F status=UCSRA;
000075 931a      	ST   -Y,R17
000076 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000077 b11b      	IN   R17,11
                 ; 0000 0050 data=UDR;
000078 b10c      	IN   R16,12
                 ; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000079 2fe1      	MOV  R30,R17
00007a 71ec      	ANDI R30,LOW(0x1C)
00007b f489      	BRNE _0x3
                 ; 0000 0052    {
                 ; 0000 0053    rx_buffer[rx_wr_index++]=data;
00007c 2de5      	MOV  R30,R5
00007d 9453      	INC  R5
00007e e0f0      	LDI  R31,0
00007f 5ae0      	SUBI R30,LOW(-_rx_buffer)
000080 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000081 8300      	ST   Z,R16
                 ; 0000 0054 #if RX_BUFFER_SIZE == 256
                 ; 0000 0055    // special case for receiver buffer size=256
                 ; 0000 0056    if (++rx_counter == 0)
                 ; 0000 0057       {
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000082 e2e0      	LDI  R30,LOW(32)
000083 15e5      	CP   R30,R5
000084 f409      	BRNE _0x4
000085 2455      	CLR  R5
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000086 9473      	INC  R7
000087 e2e0      	LDI  R30,LOW(32)
000088 15e7      	CP   R30,R7
000089 f419      	BRNE _0x5
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
00008a 2477      	CLR  R7
                 ; 0000 005D #endif
                 ; 0000 005E       rx_buffer_overflow=1;
00008b 9468      	SET
00008c f820      	BLD  R2,0
                 ; 0000 005F       }
                 ; 0000 0060    }
                 _0x5:
                 ; 0000 0061 }
                 _0x3:
00008d 9109      	LD   R16,Y+
00008e 9119      	LD   R17,Y+
00008f c022      	RJMP _0x8D
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0068 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0069 char data;
                 ; 0000 006A while (rx_counter==0);
000090 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000091 2077      	TST  R7
000092 f3f1      	BREQ _0x6
                 ; 0000 006B data=rx_buffer[rx_rd_index++];
000093 2de4      	MOV  R30,R4
000094 9443      	INC  R4
000095 e0f0      	LDI  R31,0
000096 5ae0      	SUBI R30,LOW(-_rx_buffer)
000097 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000098 8110      	LD   R17,Z
                 ; 0000 006C #if RX_BUFFER_SIZE != 256
                 ; 0000 006D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
000099 e2e0      	LDI  R30,LOW(32)
00009a 15e4      	CP   R30,R4
00009b f409      	BRNE _0x9
00009c 2444      	CLR  R4
                 ; 0000 006E #endif
                 ; 0000 006F #asm("cli")
                 _0x9:
00009d 94f8      	cli
                 ; 0000 0070 --rx_counter;
00009e 947a      	DEC  R7
                 ; 0000 0071 #asm("sei")
00009f 9478      	sei
                 ; 0000 0072 return data;
0000a0 2fe1      	MOV  R30,R17
0000a1 9119      	LD   R17,Y+
0000a2 9508      	RET
                 ; 0000 0073 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 32
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index,tx_rd_index,tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index,tx_rd_index,tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0083 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000a3 d22e      	RCALL SUBOPT_0x0
                 ; 0000 0084 if (tx_counter)
0000a4 2088      	TST  R8
0000a5 f061      	BREQ _0xA
                 ; 0000 0085    {
                 ; 0000 0086    --tx_counter;
0000a6 948a      	DEC  R8
                 ; 0000 0087    UDR=tx_buffer[tx_rd_index++];
0000a7 2de9      	MOV  R30,R9
0000a8 9493      	INC  R9
0000a9 e0f0      	LDI  R31,0
0000aa 58e0      	SUBI R30,LOW(-_tx_buffer)
0000ab 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000ac 81e0      	LD   R30,Z
0000ad b9ec      	OUT  0xC,R30
                 ; 0000 0088 #if TX_BUFFER_SIZE != 256
                 ; 0000 0089    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000ae e2e0      	LDI  R30,LOW(32)
0000af 15e9      	CP   R30,R9
0000b0 f409      	BRNE _0xB
0000b1 2499      	CLR  R9
                 ; 0000 008A #endif
                 ; 0000 008B    }
                 _0xB:
                 ; 0000 008C }
                 _0xA:
                 _0x8D:
0000b2 91e9      	LD   R30,Y+
0000b3 bfef      	OUT  SREG,R30
0000b4 91f9      	LD   R31,Y+
0000b5 91e9      	LD   R30,Y+
0000b6 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0093 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0094 while (tx_counter == TX_BUFFER_SIZE);
0000b7 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xC:
0000b8 e2e0      	LDI  R30,LOW(32)
0000b9 15e8      	CP   R30,R8
0000ba f3e9      	BREQ _0xC
                 ; 0000 0095 #asm("cli")
0000bb 94f8      	cli
                 ; 0000 0096 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000bc 2088      	TST  R8
0000bd f411      	BRNE _0x10
0000be 995d      	SBIC 0xB,5
0000bf c00d      	RJMP _0xF
                 _0x10:
                 ; 0000 0097    {
                 ; 0000 0098    tx_buffer[tx_wr_index++]=c;
0000c0 2de6      	MOV  R30,R6
0000c1 9463      	INC  R6
0000c2 e0f0      	LDI  R31,0
0000c3 58e0      	SUBI R30,LOW(-_tx_buffer)
0000c4 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0000c5 81a8      	LD   R26,Y
0000c6 83a0      	STD  Z+0,R26
                 ; 0000 0099 #if TX_BUFFER_SIZE != 256
                 ; 0000 009A    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
0000c7 e2e0      	LDI  R30,LOW(32)
0000c8 15e6      	CP   R30,R6
0000c9 f409      	BRNE _0x12
0000ca 2466      	CLR  R6
                 ; 0000 009B #endif
                 ; 0000 009C    ++tx_counter;
                 _0x12:
0000cb 9483      	INC  R8
                 ; 0000 009D    }
                 ; 0000 009E else
0000cc c002      	RJMP _0x13
                 _0xF:
                 ; 0000 009F    UDR=c;
0000cd 81e8      	LD   R30,Y
0000ce b9ec      	OUT  0xC,R30
                 ; 0000 00A0 #asm("sei")
                 _0x13:
0000cf 9478      	sei
                 ; 0000 00A1 }
0000d0 c05b      	RJMP _0x2060001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;/////////////////////////////////////////////////////////
                 ;/////////////////////////////////////////////////////////
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 3
                 ;#define ADC_VREF_TYPE 0x40
                 ;#define ZERO 10
                 ;
                 ;#define COUNT_CONTROL 75
                 ;#define HYSTIREZIS 15
                 ;
                 ;#define AP PORTC.2
                 ;#define AN PORTC.3
                 ;#define BP PORTC.4
                 ;#define BN PORTC.5
                 ;#define CP PORTC.6
                 ;#define CN PORTC.7
                 ;
                 ;#define LED1 PORTD.4  //green
                 ;#define LED2 PORTD.6  //red
                 ;
                 ;#define MIN_OUT_VOLTAGE (230*COUNT_CONTROL)
                 ;#define MAX_OUT_VOLTAGE (255*COUNT_CONTROL)
                 ;
                 ;#define MIN_TIMEREG 47    //180 grad
                 ;#define MAX_TIMEREG 180   //30 grad
                 ;
                 ;
                 ;char adc_wr_input=0, adc_rd_input=0;
                 ;char isRising[4], isFalling[4];
                 ;signed int adcValue[LAST_ADC_INPUT-FIRST_ADC_INPUT+1], tempValue;
                 ;long OutVoltage = 0;
                 ;char flag, isEnable = 1;
                 
                 	.DSEG
                 ;unsigned char timeReg = MIN_TIMEREG, lastFalling = 0;
                 ;char regCounter = 0;
                 ;char phaseCounter = 0;
                 ;char old_test = 0;
                 ;
                 ;inline void SetOut(char numb)
                 ; 0000 00CF {
                 
                 	.CSEG
                 _SetOut:
                 ; .FSTART _SetOut
                 ; 0000 00D0   if(isEnable && isRising[numb] && timeReg > MIN_TIMEREG)
0000d1 93aa      	ST   -Y,R26
                 ;	numb -> Y+0
0000d2 91e0 01b5 	LDS  R30,_isEnable
0000d4 30e0      	CPI  R30,0
0000d5 f059      	BREQ _0x17
0000d6 81e8      	LD   R30,Y
0000d7 e0f0      	LDI  R31,0
0000d8 56e0      	SUBI R30,LOW(-_isRising)
0000d9 4ffe      	SBCI R31,HIGH(-_isRising)
0000da 81e0      	LD   R30,Z
0000db 30e0      	CPI  R30,0
0000dc f021      	BREQ _0x17
0000dd 91a0 01b6 	LDS  R26,_timeReg
0000df 33a0      	CPI  R26,LOW(0x30)
0000e0 f408      	BRSH _0x18
                 _0x17:
0000e1 c04a      	RJMP _0x16
                 _0x18:
                 ; 0000 00D1   {
                 ; 0000 00D2       switch(numb)
0000e2 81e8      	LD   R30,Y
0000e3 e0f0      	LDI  R31,0
                 ; 0000 00D3       {
                 ; 0000 00D4           case 0: AP = 1; if(isFalling[1]) BN = 1; if(isFalling[2]) CN = 1;
0000e4 9730      	SBIW R30,0
0000e5 f461      	BRNE _0x1C
0000e6 9aaa      	SBI  0x15,2
                +
0000e7 91e0 01a5+LDS R30 , _isFalling + ( 1 )
                 	__GETB1MN _isFalling,1
0000e9 30e0      	CPI  R30,0
0000ea f009      	BREQ _0x1F
0000eb 9aad      	SBI  0x15,5
                 _0x1F:
                +
0000ec 91e0 01a6+LDS R30 , _isFalling + ( 2 )
                 	__GETB1MN _isFalling,2
0000ee 30e0      	CPI  R30,0
0000ef f009      	BREQ _0x22
0000f0 9aaf      	SBI  0x15,7
                 ; 0000 00D5           break;
                 _0x22:
0000f1 c01f      	RJMP _0x1B
                 ; 0000 00D6           case 1: BP = 1; if(isFalling[0]) AN = 1; if(isFalling[2]) CN = 1;
                 _0x1C:
0000f2 30e1      	CPI  R30,LOW(0x1)
0000f3 e0a0      	LDI  R26,HIGH(0x1)
0000f4 07fa      	CPC  R31,R26
0000f5 f461      	BRNE _0x25
0000f6 9aac      	SBI  0x15,4
0000f7 91e0 01a4 	LDS  R30,_isFalling
0000f9 30e0      	CPI  R30,0
0000fa f009      	BREQ _0x28
0000fb 9aab      	SBI  0x15,3
                 _0x28:
                +
0000fc 91e0 01a6+LDS R30 , _isFalling + ( 2 )
                 	__GETB1MN _isFalling,2
0000fe 30e0      	CPI  R30,0
0000ff f009      	BREQ _0x2B
000100 9aaf      	SBI  0x15,7
                 ; 0000 00D7           break;
                 _0x2B:
000101 c00f      	RJMP _0x1B
                 ; 0000 00D8           case 2: CP = 1; if(isFalling[0]) AN = 1; if(isFalling[1]) BN = 1;
                 _0x25:
000102 30e2      	CPI  R30,LOW(0x2)
000103 e0a0      	LDI  R26,HIGH(0x2)
000104 07fa      	CPC  R31,R26
000105 f459      	BRNE _0x1B
000106 9aae      	SBI  0x15,6
000107 91e0 01a4 	LDS  R30,_isFalling
000109 30e0      	CPI  R30,0
00010a f009      	BREQ _0x31
00010b 9aab      	SBI  0x15,3
                 _0x31:
                +
00010c 91e0 01a5+LDS R30 , _isFalling + ( 1 )
                 	__GETB1MN _isFalling,1
00010e 30e0      	CPI  R30,0
00010f f009      	BREQ _0x34
000110 9aad      	SBI  0x15,5
                 ; 0000 00D9           break;
                 _0x34:
                 ; 0000 00DA       }
                 _0x1B:
                 ; 0000 00DB 
                 ; 0000 00DC       delay_us(50);
                +
000111 ec88     +LDI R24 , LOW ( 200 )
000112 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000113 9701     +SBIW R24 , 1
000114 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
                 ; 0000 00DD 
                 ; 0000 00DE       switch(numb)
000115 81e8      	LD   R30,Y
000116 e0f0      	LDI  R31,0
                 ; 0000 00DF       {
                 ; 0000 00E0           case 0: AP = 0; BN = 0; CN = 0;
000117 9730      	SBIW R30,0
000118 f421      	BRNE _0x3A
000119 98aa      	CBI  0x15,2
00011a 98ad      	CBI  0x15,5
00011b 98af      	CBI  0x15,7
                 ; 0000 00E1           break;
00011c c00f      	RJMP _0x39
                 ; 0000 00E2           case 1: BP = 0; AN = 0; CN = 0;
                 _0x3A:
00011d 30e1      	CPI  R30,LOW(0x1)
00011e e0a0      	LDI  R26,HIGH(0x1)
00011f 07fa      	CPC  R31,R26
000120 f421      	BRNE _0x41
000121 98ac      	CBI  0x15,4
000122 98ab      	CBI  0x15,3
000123 98af      	CBI  0x15,7
                 ; 0000 00E3           break;
000124 c007      	RJMP _0x39
                 ; 0000 00E4           case 2: CP = 0; AN = 0; BN = 0;
                 _0x41:
000125 30e2      	CPI  R30,LOW(0x2)
000126 e0a0      	LDI  R26,HIGH(0x2)
000127 07fa      	CPC  R31,R26
000128 f419      	BRNE _0x39
000129 98ae      	CBI  0x15,6
00012a 98ab      	CBI  0x15,3
00012b 98ad      	CBI  0x15,5
                 ; 0000 00E5           break;
                 ; 0000 00E6       }
                 _0x39:
                 ; 0000 00E7   }
                 ; 0000 00E8 }
                 _0x16:
                 _0x2060001:
00012c 9621      	ADIW R28,1
00012d 9508      	RET
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00EC {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00012e d1a8      	RCALL SUBOPT_0x1
                 ; 0000 00ED // Reinitialize Timer 0 value
                 ; 0000 00EE TCCR0=0x00;
00012f e0e0      	LDI  R30,LOW(0)
000130 bfe3      	OUT  0x33,R30
                 ; 0000 00EF TCNT0=0x4A;
000131 e4ea      	LDI  R30,LOW(74)
000132 bfe2      	OUT  0x32,R30
                 ; 0000 00F0 // Place your code here
                 ; 0000 00F1 SetOut(0);
000133 e0a0      	LDI  R26,LOW(0)
000134 df9c      	RCALL _SetOut
                 ; 0000 00F2 }
000135 c12d      	RJMP _0x8C
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00F6 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000136 d1a0      	RCALL SUBOPT_0x1
                 ; 0000 00F7 // Place your code here
                 ; 0000 00F8 SetOut(0);
000137 e0a0      	LDI  R26,LOW(0)
000138 df98      	RCALL _SetOut
                 ; 0000 00F9 }
000139 c129      	RJMP _0x8C
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 00FD {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00013a d19c      	RCALL SUBOPT_0x1
                 ; 0000 00FE // Reinitialize Timer1 value
                 ; 0000 00FF TCCR1B=0x00;
00013b e0e0      	LDI  R30,LOW(0)
00013c bdee      	OUT  0x2E,R30
                 ; 0000 0100 TCNT1H=0xFF;
00013d d1a7      	RCALL SUBOPT_0x2
                 ; 0000 0101 TCNT1L=0x4A;
                 ; 0000 0102 // Place your code here
                 ; 0000 0103 SetOut(1);
00013e e0a1      	LDI  R26,LOW(1)
00013f df91      	RCALL _SetOut
                 ; 0000 0104 }
000140 c122      	RJMP _0x8C
                 ; .FEND
                 ;
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0108 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000141 d195      	RCALL SUBOPT_0x1
                 ; 0000 0109 // Place your code here
                 ; 0000 010A SetOut(1);
000142 e0a1      	LDI  R26,LOW(1)
000143 df8d      	RCALL _SetOut
                 ; 0000 010B }
000144 c11e      	RJMP _0x8C
                 ; .FEND
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 010F {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000145 d191      	RCALL SUBOPT_0x1
                 ; 0000 0110 // Reinitialize Timer2 value
                 ; 0000 0111 TCCR2=0x00;
000146 e0e0      	LDI  R30,LOW(0)
000147 bde5      	OUT  0x25,R30
                 ; 0000 0112 TCNT2=0x4A;
000148 e4ea      	LDI  R30,LOW(74)
000149 bde4      	OUT  0x24,R30
                 ; 0000 0113 // Place your code here
                 ; 0000 0114 SetOut(2);
00014a e0a2      	LDI  R26,LOW(2)
00014b df85      	RCALL _SetOut
                 ; 0000 0115 }
00014c c116      	RJMP _0x8C
                 ; .FEND
                 ;
                 ;// Timer2 output compare interrupt service routine
                 ;interrupt [TIM2_COMP] void timer2_comp_isr(void)
                 ; 0000 0119 {
                 _timer2_comp_isr:
                 ; .FSTART _timer2_comp_isr
00014d d189      	RCALL SUBOPT_0x1
                 ; 0000 011A // Place your code here
                 ; 0000 011B SetOut(2);
00014e e0a2      	LDI  R26,LOW(2)
00014f df81      	RCALL _SetOut
                 ; 0000 011C }
000150 c112      	RJMP _0x8C
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 0123 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000151 d185      	RCALL SUBOPT_0x1
                 ; 0000 0124 // Read the AD conversion result
                 ; 0000 0125 
                 ; 0000 0126 tempValue = ADCW;
                +
000152 b0c4     +IN R12 , 4
000153 b0d5     +IN R13 , 4 + 1
                 	__INWR 12,13,4
                 ; 0000 0127 
                 ; 0000 0128 // Select next ADC input
                 ; 0000 0129     adc_rd_input = adc_wr_input + 1;
000154 2deb      	MOV  R30,R11
000155 5fef      	SUBI R30,-LOW(1)
000156 2eae      	MOV  R10,R30
                 ; 0000 012A     if(adc_rd_input > 3) adc_rd_input -= 4;
000157 e0e3      	LDI  R30,LOW(3)
000158 15ea      	CP   R30,R10
000159 f410      	BRSH _0x4F
00015a e0e4      	LDI  R30,LOW(4)
00015b 1aae      	SUB  R10,R30
                 ; 0000 012B     ADMUX=(ADC_VREF_TYPE & 0xff) | adc_rd_input;
                 _0x4F:
00015c 2dea      	MOV  R30,R10
00015d 64e0      	ORI  R30,0x40
00015e b9e7      	OUT  0x7,R30
                 ; 0000 012C 
                 ; 0000 012D 
                 ; 0000 012E if(adc_wr_input<3) //Фазы
00015f e0e3      	LDI  R30,LOW(3)
000160 16be      	CP   R11,R30
000161 f008      	BRLO PC+2
000162 c058      	RJMP _0x50
                 ; 0000 012F {
                 ; 0000 0130 tempValue -= 0x01FF;
000163 efef      	LDI  R30,LOW(511)
000164 e0f1      	LDI  R31,HIGH(511)
                +
000165 1ace     +SUB R12 , R30
000166 0adf     +SBC R13 , R31
                 	__SUBWRR 12,13,30,31
                 ; 0000 0131 adcValue[adc_wr_input] = tempValue;
000167 d182      	RCALL SUBOPT_0x3
000168 0fea      	ADD  R30,R26
000169 1ffb      	ADC  R31,R27
00016a 82c0      	ST   Z,R12
00016b 82d1      	STD  Z+1,R13
                 ; 0000 0132 
                 ; 0000 0133 if(tempValue > (ZERO+HYSTIREZIS) && isRising[adc_wr_input] == 0)
00016c d184      	RCALL SUBOPT_0x4
00016d f424      	BRGE _0x52
00016e d187      	RCALL SUBOPT_0x5
00016f 81a0      	LD   R26,Z
000170 30a0      	CPI  R26,LOW(0x0)
000171 f009      	BREQ _0x53
                 _0x52:
000172 c030      	RJMP _0x51
                 _0x53:
                 ; 0000 0134 {
                 ; 0000 0135     isRising[adc_wr_input] = 1;
000173 d182      	RCALL SUBOPT_0x5
000174 e0a1      	LDI  R26,LOW(1)
000175 83a0      	STD  Z+0,R26
                 ; 0000 0136     phaseCounter++;
000176 d184      	RCALL SUBOPT_0x6
                 ; 0000 0137 
                 ; 0000 0138     if(isEnable)
000177 91e0 01b5 	LDS  R30,_isEnable
000179 30e0      	CPI  R30,0
00017a f141      	BREQ _0x54
                 ; 0000 0139     {
                 ; 0000 013A     switch(adc_wr_input)
00017b 2deb      	MOV  R30,R11
00017c e0f0      	LDI  R31,0
                 ; 0000 013B     {
                 ; 0000 013C         case 0:
00017d 9730      	SBIW R30,0
00017e f449      	BRNE _0x58
                 ; 0000 013D             if((TCCR0&7) == 0)
00017f b7e3      	IN   R30,0x33
000180 70e7      	ANDI R30,LOW(0x7)
000181 f429      	BRNE _0x59
                 ; 0000 013E             {
                 ; 0000 013F               TCNT0=timeReg; //Время включения 1
000182 91e0 01b6 	LDS  R30,_timeReg
000184 bfe2      	OUT  0x32,R30
                 ; 0000 0140               TCCR0=0x05;  //putchar(0xB1);
000185 e0e5      	LDI  R30,LOW(5)
000186 bfe3      	OUT  0x33,R30
                 ; 0000 0141             }
                 ; 0000 0142         break;
                 _0x59:
000187 c01b      	RJMP _0x57
                 ; 0000 0143         case 1:
                 _0x58:
000188 30e1      	CPI  R30,LOW(0x1)
000189 e0a0      	LDI  R26,HIGH(0x1)
00018a 07fa      	CPC  R31,R26
00018b f459      	BRNE _0x5A
                 ; 0000 0144             if((TCCR1B&7) == 0)
00018c b5ee      	IN   R30,0x2E
00018d 70e7      	ANDI R30,LOW(0x7)
00018e f439      	BRNE _0x5B
                 ; 0000 0145             {
                 ; 0000 0146               TCNT1H=0xFF;
00018f efef      	LDI  R30,LOW(255)
000190 bded      	OUT  0x2D,R30
                 ; 0000 0147               TCNT1L=timeReg; //Время включения 2
000191 91e0 01b6 	LDS  R30,_timeReg
000193 bdec      	OUT  0x2C,R30
                 ; 0000 0148               TCCR1B=0x05;  //putchar(0xB2);
000194 e0e5      	LDI  R30,LOW(5)
000195 bdee      	OUT  0x2E,R30
                 ; 0000 0149             }
                 ; 0000 014A         break;
                 _0x5B:
000196 c00c      	RJMP _0x57
                 ; 0000 014B         case 2:
                 _0x5A:
000197 30e2      	CPI  R30,LOW(0x2)
000198 e0a0      	LDI  R26,HIGH(0x2)
000199 07fa      	CPC  R31,R26
00019a f441      	BRNE _0x57
                 ; 0000 014C             if((TCCR2&7) == 0)
00019b b5e5      	IN   R30,0x25
00019c 70e7      	ANDI R30,LOW(0x7)
00019d f429      	BRNE _0x5D
                 ; 0000 014D             {
                 ; 0000 014E               TCNT2=timeReg; //Время включения 3
00019e 91e0 01b6 	LDS  R30,_timeReg
0001a0 bde4      	OUT  0x24,R30
                 ; 0000 014F               TCCR2=0x07;   //putchar(0xB3);
0001a1 e0e7      	LDI  R30,LOW(7)
0001a2 bde5      	OUT  0x25,R30
                 ; 0000 0150             }
                 ; 0000 0151         break;
                 _0x5D:
                 ; 0000 0152     }
                 _0x57:
                 ; 0000 0153     }
                 ; 0000 0154 }
                 _0x54:
                 ; 0000 0155 
                 ; 0000 0156 if(tempValue < ((signed int)ZERO-HYSTIREZIS))
                 _0x51:
0001a3 d15d      	RCALL SUBOPT_0x7
0001a4 f41c      	BRGE _0x5E
                 ; 0000 0157 {
                 ; 0000 0158     isRising[adc_wr_input] = 0;
0001a5 d150      	RCALL SUBOPT_0x5
0001a6 e0a0      	LDI  R26,LOW(0)
0001a7 83a0      	STD  Z+0,R26
                 ; 0000 0159 }
                 ; 0000 015A 
                 ; 0000 015B if(tempValue < ((signed int)ZERO-HYSTIREZIS) && isFalling[adc_wr_input] == 0)
                 _0x5E:
0001a8 d158      	RCALL SUBOPT_0x7
0001a9 f424      	BRGE _0x60
0001aa d15b      	RCALL SUBOPT_0x8
0001ab 81a0      	LD   R26,Z
0001ac 30a0      	CPI  R26,LOW(0x0)
0001ad f009      	BREQ _0x61
                 _0x60:
0001ae c006      	RJMP _0x5F
                 _0x61:
                 ; 0000 015C {
                 ; 0000 015D     isFalling[adc_wr_input] = 1;
0001af d156      	RCALL SUBOPT_0x8
0001b0 e0a1      	LDI  R26,LOW(1)
0001b1 83a0      	STD  Z+0,R26
                 ; 0000 015E     lastFalling = adc_wr_input;
0001b2 92b0 01b7 	STS  _lastFalling,R11
                 ; 0000 015F     phaseCounter++;
0001b4 d146      	RCALL SUBOPT_0x6
                 ; 0000 0160 }
                 ; 0000 0161 
                 ; 0000 0162 if(tempValue > (ZERO+HYSTIREZIS))
                 _0x5F:
0001b5 d13b      	RCALL SUBOPT_0x4
0001b6 f41c      	BRGE _0x62
                 ; 0000 0163 {
                 ; 0000 0164     isFalling[adc_wr_input] = 0;
0001b7 d14e      	RCALL SUBOPT_0x8
0001b8 e0a0      	LDI  R26,LOW(0)
0001b9 83a0      	STD  Z+0,R26
                 ; 0000 0165 }
                 ; 0000 0166 }
                 _0x62:
                 ; 0000 0167 else //Выход
0001ba c09c      	RJMP _0x63
                 _0x50:
                 ; 0000 0168 {
                 ; 0000 0169     OutVoltage += tempValue - 255;
0001bb 01f6      	MOVW R30,R12
0001bc 5fef      	SUBI R30,LOW(255)
0001bd 40f0      	SBCI R31,HIGH(255)
0001be d14c      	RCALL SUBOPT_0x9
0001bf d167      	RCALL __CWD1
0001c0 d15c      	RCALL __ADDD12
0001c1 93e0 01b0 	STS  _OutVoltage,R30
0001c3 93f0 01b1 	STS  _OutVoltage+1,R31
0001c5 9360 01b2 	STS  _OutVoltage+2,R22
0001c7 9370 01b3 	STS  _OutVoltage+3,R23
                 ; 0000 016A 
                 ; 0000 016B     if(++regCounter >= COUNT_CONTROL)
0001c9 91a0 01b8 	LDS  R26,_regCounter
0001cb 5faf      	SUBI R26,-LOW(1)
0001cc 93a0 01b8 	STS  _regCounter,R26
0001ce 34ab      	CPI  R26,LOW(0x4B)
0001cf f408      	BRSH PC+2
0001d0 c07e      	RJMP _0x64
                 ; 0000 016C     {
                 ; 0000 016D         isEnable = (phaseCounter > 4) && (phaseCounter < 11); //Защита от частоты сети
0001d1 91a0 01b9 	LDS  R26,_phaseCounter
0001d3 30a5      	CPI  R26,LOW(0x5)
0001d4 f020      	BRLO _0x65
0001d5 30ab      	CPI  R26,LOW(0xB)
0001d6 f410      	BRSH _0x65
0001d7 e0e1      	LDI  R30,1
0001d8 c001      	RJMP _0x66
                 _0x65:
0001d9 e0e0      	LDI  R30,0
                 _0x66:
0001da 93e0 01b5 	STS  _isEnable,R30
                 ; 0000 016E         if(OutVoltage < 40 && timeReg > (MIN_TIMEREG + 26)) isEnable = 0; //Защита от мин тока удержания
0001dc d12e      	RCALL SUBOPT_0x9
                +
0001dd 32a8     +CPI R26 , LOW ( 0x28 )
0001de e0e0     +LDI R30 , HIGH ( 0x28 )
0001df 07be     +CPC R27 , R30
0001e0 e0e0     +LDI R30 , BYTE3 ( 0x28 )
0001e1 078e     +CPC R24 , R30
0001e2 e0e0     +LDI R30 , BYTE4 ( 0x28 )
0001e3 079e     +CPC R25 , R30
                 	__CPD2N 0x28
0001e4 f424      	BRGE _0x68
0001e5 91a0 01b6 	LDS  R26,_timeReg
0001e7 34aa      	CPI  R26,LOW(0x4A)
0001e8 f408      	BRSH _0x69
                 _0x68:
0001e9 c003      	RJMP _0x67
                 _0x69:
0001ea e0e0      	LDI  R30,LOW(0)
0001eb 93e0 01b5 	STS  _isEnable,R30
                 ; 0000 016F 
                 ; 0000 0170         if(isEnable){LED1 = 0; LED2 = 0;} else {LED1 = 1; LED2 = 1; timeReg = MIN_TIMEREG; }
                 _0x67:
0001ed 91e0 01b5 	LDS  R30,_isEnable
0001ef 30e0      	CPI  R30,0
0001f0 f019      	BREQ _0x6A
0001f1 9894      	CBI  0x12,4
0001f2 9896      	CBI  0x12,6
0001f3 c005      	RJMP _0x6F
                 _0x6A:
0001f4 9a94      	SBI  0x12,4
0001f5 9a96      	SBI  0x12,6
0001f6 e2ef      	LDI  R30,LOW(47)
0001f7 93e0 01b6 	STS  _timeReg,R30
                 _0x6F:
                 ; 0000 0171 
                 ; 0000 0172         if(OutVoltage < MIN_OUT_VOLTAGE){ if(timeReg < MAX_TIMEREG) timeReg++; LED1 = 1;}  //LED2 on Volt+
0001f9 d111      	RCALL SUBOPT_0x9
                +
0001fa 36a2     +CPI R26 , LOW ( 0x4362 )
0001fb e4e3     +LDI R30 , HIGH ( 0x4362 )
0001fc 07be     +CPC R27 , R30
0001fd e0e0     +LDI R30 , BYTE3 ( 0x4362 )
0001fe 078e     +CPC R24 , R30
0001ff e0e0     +LDI R30 , BYTE4 ( 0x4362 )
000200 079e     +CPC R25 , R30
                 	__CPD2N 0x4362
000201 f454      	BRGE _0x74
000202 91a0 01b6 	LDS  R26,_timeReg
000204 3ba4      	CPI  R26,LOW(0xB4)
000205 f428      	BRSH _0x75
000206 91e0 01b6 	LDS  R30,_timeReg
000208 5fef      	SUBI R30,-LOW(1)
000209 93e0 01b6 	STS  _timeReg,R30
                 _0x75:
00020b 9a94      	SBI  0x12,4
                 ; 0000 0173         if(OutVoltage > MAX_OUT_VOLTAGE){ if(timeReg > MIN_TIMEREG) timeReg--; LED2 = 1;}  //Для 50 герц
                 _0x74:
00020c d0fe      	RCALL SUBOPT_0x9
                +
00020d 3ba6     +CPI R26 , LOW ( 0x4AB6 )
00020e e4ea     +LDI R30 , HIGH ( 0x4AB6 )
00020f 07be     +CPC R27 , R30
000210 e0e0     +LDI R30 , BYTE3 ( 0x4AB6 )
000211 078e     +CPC R24 , R30
000212 e0e0     +LDI R30 , BYTE4 ( 0x4AB6 )
000213 079e     +CPC R25 , R30
                 	__CPD2N 0x4AB6
000214 f054      	BRLT _0x78
000215 91a0 01b6 	LDS  R26,_timeReg
000217 33a0      	CPI  R26,LOW(0x30)
000218 f028      	BRLO _0x79
000219 91e0 01b6 	LDS  R30,_timeReg
00021b 50e1      	SUBI R30,LOW(1)
00021c 93e0 01b6 	STS  _timeReg,R30
                 _0x79:
00021e 9a96      	SBI  0x12,6
                 ; 0000 0174         if(OutVoltage > (MAX_OUT_VOLTAGE+30) && timeReg > (MIN_TIMEREG+3)) timeReg-=3;
                 _0x78:
00021f d0eb      	RCALL SUBOPT_0x9
                +
000220 3da4     +CPI R26 , LOW ( 0x4AD4 )
000221 e4ea     +LDI R30 , HIGH ( 0x4AD4 )
000222 07be     +CPC R27 , R30
000223 e0e0     +LDI R30 , BYTE3 ( 0x4AD4 )
000224 078e     +CPC R24 , R30
000225 e0e0     +LDI R30 , BYTE4 ( 0x4AD4 )
000226 079e     +CPC R25 , R30
                 	__CPD2N 0x4AD4
000227 f024      	BRLT _0x7D
000228 91a0 01b6 	LDS  R26,_timeReg
00022a 33a3      	CPI  R26,LOW(0x33)
00022b f408      	BRSH _0x7E
                 _0x7D:
00022c c005      	RJMP _0x7C
                 _0x7E:
00022d 91e0 01b6 	LDS  R30,_timeReg
00022f 50e3      	SUBI R30,LOW(3)
000230 93e0 01b6 	STS  _timeReg,R30
                 ; 0000 0175          if(timeReg != old_test) putchar(timeReg);
                 _0x7C:
000232 91e0 01ba 	LDS  R30,_old_test
000234 91a0 01b6 	LDS  R26,_timeReg
000236 17ea      	CP   R30,R26
000237 f009      	BREQ _0x7F
000238 de7e      	RCALL _putchar
                 ; 0000 0176          old_test = timeReg;
                 _0x7F:
000239 91e0 01b6 	LDS  R30,_timeReg
00023b 93e0 01ba 	STS  _old_test,R30
                 ; 0000 0177          if(phaseCounter>7) putchar(phaseCounter);
00023d 91a0 01b9 	LDS  R26,_phaseCounter
00023f 30a8      	CPI  R26,LOW(0x8)
000240 f008      	BRLO _0x80
000241 de75      	RCALL _putchar
                 ; 0000 0178         regCounter = 0;
                 _0x80:
000242 e0e0      	LDI  R30,LOW(0)
000243 93e0 01b8 	STS  _regCounter,R30
                 ; 0000 0179         OutVoltage = 0;
000245 93e0 01b0 	STS  _OutVoltage,R30
000247 93e0 01b1 	STS  _OutVoltage+1,R30
000249 93e0 01b2 	STS  _OutVoltage+2,R30
00024b 93e0 01b3 	STS  _OutVoltage+3,R30
                 ; 0000 017A         phaseCounter = 0;
00024d 93e0 01b9 	STS  _phaseCounter,R30
                 ; 0000 017B     }
                 ; 0000 017C     adcValue[adc_wr_input] = tempValue - 255;
                 _0x64:
00024f d09a      	RCALL SUBOPT_0x3
000250 0fae      	ADD  R26,R30
000251 1fbf      	ADC  R27,R31
000252 01f6      	MOVW R30,R12
000253 5fef      	SUBI R30,LOW(255)
000254 40f0      	SBCI R31,HIGH(255)
000255 93ed      	ST   X+,R30
000256 93fc      	ST   X,R31
                 ; 0000 017D }
                 _0x63:
                 ; 0000 017E 
                 ; 0000 017F flag = 1;
000257 e0e1      	LDI  R30,LOW(1)
000258 93e0 01b4 	STS  _flag,R30
                 ; 0000 0180 
                 ; 0000 0181 // Select next ADC input
                 ; 0000 0182 if (++adc_wr_input > 3)
00025a 94b3      	INC  R11
00025b e0e3      	LDI  R30,LOW(3)
00025c 15eb      	CP   R30,R11
00025d f408      	BRSH _0x81
                 ; 0000 0183 {
                 ; 0000 0184     adc_wr_input = 0;
00025e 24bb      	CLR  R11
                 ; 0000 0185 }
                 ; 0000 0186 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0187 delay_us(10);
                 _0x81:
                +
00025f e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000260 958a     +DEC R24
000261 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0188 // Start the AD conversion
                 ; 0000 0189 ADCSRA|=0x40;
000262 9a36      	SBI  0x6,6
                 ; 0000 018A }
                 _0x8C:
000263 91e9      	LD   R30,Y+
000264 bfef      	OUT  SREG,R30
000265 91f9      	LD   R31,Y+
000266 91e9      	LD   R30,Y+
000267 91b9      	LD   R27,Y+
000268 91a9      	LD   R26,Y+
000269 9199      	LD   R25,Y+
00026a 9189      	LD   R24,Y+
00026b 9179      	LD   R23,Y+
00026c 9169      	LD   R22,Y+
00026d 90f9      	LD   R15,Y+
00026e 9019      	LD   R1,Y+
00026f 9009      	LD   R0,Y+
000270 9518      	RETI
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 018F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0190 // Declare your local variables here
                 ; 0000 0191 char i;
                 ; 0000 0192 // Input/Output Ports initialization
                 ; 0000 0193 // Port A initialization
                 ; 0000 0194 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0195 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0196 PORTA=0x00;
                 ;	i -> R17
000271 e0e0      	LDI  R30,LOW(0)
000272 bbeb      	OUT  0x1B,R30
                 ; 0000 0197 DDRA=0x00;
000273 bbea      	OUT  0x1A,R30
                 ; 0000 0198 
                 ; 0000 0199 // Port B initialization
                 ; 0000 019A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
                 ; 0000 019B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
                 ; 0000 019C PORTB=0x00;
000274 bbe8      	OUT  0x18,R30
                 ; 0000 019D DDRB=0x01;
000275 e0e1      	LDI  R30,LOW(1)
000276 bbe7      	OUT  0x17,R30
                 ; 0000 019E 
                 ; 0000 019F // Port C initialization
                 ; 0000 01A0 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 01A1 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
                 ; 0000 01A2 PORTC=0x00;
000277 e0e0      	LDI  R30,LOW(0)
000278 bbe5      	OUT  0x15,R30
                 ; 0000 01A3 DDRC=0xFC;
000279 efec      	LDI  R30,LOW(252)
00027a bbe4      	OUT  0x14,R30
                 ; 0000 01A4 
                 ; 0000 01A5 // Port D initialization
                 ; 0000 01A6 // Func7=In Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01A7 // State7=T State6=0 State5=T State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 01A8 PORTD=0x00;
00027b e0e0      	LDI  R30,LOW(0)
00027c bbe2      	OUT  0x12,R30
                 ; 0000 01A9 DDRD=0x50;
00027d e5e0      	LDI  R30,LOW(80)
00027e bbe1      	OUT  0x11,R30
                 ; 0000 01AA 
                 ; 0000 01AB 
                 ; 0000 01AC // Timer/Counter 0 initialization
                 ; 0000 01AD // Clock source: System Clock
                 ; 0000 01AE // Clock value: 15,625 kHz
                 ; 0000 01AF // Mode: Normal top=0xFF
                 ; 0000 01B0 // OC0 output: Disconnected
                 ; 0000 01B1 //TCCR0=0x05;
                 ; 0000 01B2 TCNT0=0x4A;
00027f e4ea      	LDI  R30,LOW(74)
000280 bfe2      	OUT  0x32,R30
                 ; 0000 01B3 OCR0=0xCC;
000281 ecec      	LDI  R30,LOW(204)
000282 bfec      	OUT  0x3C,R30
                 ; 0000 01B4 
                 ; 0000 01B5 // Timer/Counter 1 initialization
                 ; 0000 01B6 // Clock source: System Clock
                 ; 0000 01B7 // Clock value: 15,625 kHz
                 ; 0000 01B8 // Mode: Normal top=0xFFFF
                 ; 0000 01B9 // OC1A output: Discon.
                 ; 0000 01BA // OC1B output: Discon.
                 ; 0000 01BB // Noise Canceler: Off
                 ; 0000 01BC // Input Capture on Falling Edge
                 ; 0000 01BD // Timer1 Overflow Interrupt: On
                 ; 0000 01BE // Input Capture Interrupt: Off
                 ; 0000 01BF // Compare A Match Interrupt: On
                 ; 0000 01C0 // Compare B Match Interrupt: Off
                 ; 0000 01C1 TCCR1A=0x00;
000283 e0e0      	LDI  R30,LOW(0)
000284 bdef      	OUT  0x2F,R30
                 ; 0000 01C2 //TCCR1B=0x05;
                 ; 0000 01C3 TCNT1H=0xFF;
000285 d05f      	RCALL SUBOPT_0x2
                 ; 0000 01C4 TCNT1L=0x4A;
                 ; 0000 01C5 ICR1H=0x00;
000286 e0e0      	LDI  R30,LOW(0)
000287 bde7      	OUT  0x27,R30
                 ; 0000 01C6 ICR1L=0x00;
000288 bde6      	OUT  0x26,R30
                 ; 0000 01C7 OCR1AH=0xFF;
000289 efef      	LDI  R30,LOW(255)
00028a bdeb      	OUT  0x2B,R30
                 ; 0000 01C8 OCR1AL=0xCC;
00028b ecec      	LDI  R30,LOW(204)
00028c bdea      	OUT  0x2A,R30
                 ; 0000 01C9 OCR1BH=0x00;
00028d e0e0      	LDI  R30,LOW(0)
00028e bde9      	OUT  0x29,R30
                 ; 0000 01CA OCR1BL=0x00;
00028f bde8      	OUT  0x28,R30
                 ; 0000 01CB 
                 ; 0000 01CC // Timer/Counter 2 initialization
                 ; 0000 01CD // Clock source: System Clock
                 ; 0000 01CE // Clock value: 15,625 kHz
                 ; 0000 01CF // Mode: Normal top=0xFF
                 ; 0000 01D0 // OC2 output: Disconnected
                 ; 0000 01D1 ASSR=0x00;
000290 bde2      	OUT  0x22,R30
                 ; 0000 01D2 //TCCR2=0x07;
                 ; 0000 01D3 TCNT2=0x4A;
000291 e4ea      	LDI  R30,LOW(74)
000292 bde4      	OUT  0x24,R30
                 ; 0000 01D4 OCR2=0xCC;
000293 ecec      	LDI  R30,LOW(204)
000294 bde3      	OUT  0x23,R30
                 ; 0000 01D5 
                 ; 0000 01D6 // External Interrupt(s) initialization
                 ; 0000 01D7 // INT0: Off
                 ; 0000 01D8 // INT1: Off
                 ; 0000 01D9 // INT2: Off
                 ; 0000 01DA MCUCR=0x00;
000295 e0e0      	LDI  R30,LOW(0)
000296 bfe5      	OUT  0x35,R30
                 ; 0000 01DB MCUCSR=0x00;
000297 bfe4      	OUT  0x34,R30
                 ; 0000 01DC 
                 ; 0000 01DD // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01DE TIMSK=0xD7;
000298 ede7      	LDI  R30,LOW(215)
000299 bfe9      	OUT  0x39,R30
                 ; 0000 01DF 
                 ; 0000 01E0 
                 ; 0000 01E1 // USART initialization
                 ; 0000 01E2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01E3 // USART Receiver: On
                 ; 0000 01E4 // USART Transmitter: On
                 ; 0000 01E5 // USART Mode: Asynchronous
                 ; 0000 01E6 // USART Baud Rate: 38400
                 ; 0000 01E7 UCSRA=0x00;
00029a e0e0      	LDI  R30,LOW(0)
00029b b9eb      	OUT  0xB,R30
                 ; 0000 01E8 UCSRB=0xD8;
00029c ede8      	LDI  R30,LOW(216)
00029d b9ea      	OUT  0xA,R30
                 ; 0000 01E9 UCSRC=0x86;
00029e e8e6      	LDI  R30,LOW(134)
00029f bde0      	OUT  0x20,R30
                 ; 0000 01EA UBRRH=0x00;
0002a0 e0e0      	LDI  R30,LOW(0)
0002a1 bde0      	OUT  0x20,R30
                 ; 0000 01EB UBRRL=0x67; //UBRRL=0x19;
0002a2 e6e7      	LDI  R30,LOW(103)
0002a3 b9e9      	OUT  0x9,R30
                 ; 0000 01EC 
                 ; 0000 01ED // Analog Comparator initialization
                 ; 0000 01EE // Analog Comparator: Off
                 ; 0000 01EF // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01F0 ACSR=0x80;
0002a4 e8e0      	LDI  R30,LOW(128)
0002a5 b9e8      	OUT  0x8,R30
                 ; 0000 01F1 SFIOR=0x00;
0002a6 e0e0      	LDI  R30,LOW(0)
0002a7 bfe0      	OUT  0x30,R30
                 ; 0000 01F2 
                 ; 0000 01F3 // ADC initialization
                 ; 0000 01F4 // ADC Clock frequency: 250,000 kHz
                 ; 0000 01F5 // ADC Voltage Reference: AVCC pin
                 ; 0000 01F6 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 01F7 ADMUX=FIRST_ADC_INPUT | (ADC_VREF_TYPE & 0xff);
0002a8 e4e0      	LDI  R30,LOW(64)
0002a9 b9e7      	OUT  0x7,R30
                 ; 0000 01F8 ADCSRA=0xCE;
0002aa ecee      	LDI  R30,LOW(206)
0002ab b9e6      	OUT  0x6,R30
                 ; 0000 01F9 
                 ; 0000 01FA // SPI initialization
                 ; 0000 01FB // SPI disabled
                 ; 0000 01FC SPCR=0x00;
0002ac e0e0      	LDI  R30,LOW(0)
0002ad b9ed      	OUT  0xD,R30
                 ; 0000 01FD 
                 ; 0000 01FE // TWI initialization
                 ; 0000 01FF // TWI disabled
                 ; 0000 0200 TWCR=0x00;
0002ae bfe6      	OUT  0x36,R30
                 ; 0000 0201 
                 ; 0000 0202 // Watchdog Timer initialization
                 ; 0000 0203 // Watchdog Timer Prescaler: OSC/512k
                 ; 0000 0204 #pragma optsize-
                 ; 0000 0205 WDTCR=0x1D;
0002af e1ed      	LDI  R30,LOW(29)
0002b0 bde1      	OUT  0x21,R30
                 ; 0000 0206 WDTCR=0x0D;
0002b1 e0ed      	LDI  R30,LOW(13)
0002b2 bde1      	OUT  0x21,R30
                 ; 0000 0207 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0208 #pragma optsize+
                 ; 0000 0209 #endif
                 ; 0000 020A 
                 ; 0000 020B // Global enable interrupts
                 ; 0000 020C #asm("sei")
0002b3 9478      	sei
                 ; 0000 020D 
                 ; 0000 020E putchar(0xCC);
0002b4 ecac      	LDI  R26,LOW(204)
0002b5 de01      	RCALL _putchar
                 ; 0000 020F while (1)
                 _0x82:
                 ; 0000 0210       {
                 ; 0000 0211       #asm("wdr")
0002b6 95a8      	wdr
                 ; 0000 0212       if(flag && rx_counter)
0002b7 91e0 01b4 	LDS  R30,_flag
0002b9 30e0      	CPI  R30,0
0002ba f011      	BREQ _0x86
0002bb 2077      	TST  R7
0002bc f409      	BRNE _0x87
                 _0x86:
0002bd c012      	RJMP _0x85
                 _0x87:
                 ; 0000 0213       {
                 ; 0000 0214         getchar();
0002be ddd1      	RCALL _getchar
                 ; 0000 0215         for(i=0; i<4; i++)
0002bf e010      	LDI  R17,LOW(0)
                 _0x89:
0002c0 3014      	CPI  R17,4
0002c1 f458      	BRSH _0x8A
                 ; 0000 0216         {
                 ; 0000 0217           putchar(adcValue[i] & 0xFF);
0002c2 d051      	RCALL SUBOPT_0xA
0002c3 91ec      	LD   R30,X
0002c4 2fae      	MOV  R26,R30
0002c5 ddf1      	RCALL _putchar
                 ; 0000 0218           putchar(adcValue[i] >> 8);
0002c6 d04d      	RCALL SUBOPT_0xA
0002c7 d064      	RCALL __GETW1P
0002c8 d059      	RCALL __ASRW8
0002c9 2fae      	MOV  R26,R30
0002ca ddec      	RCALL _putchar
                 ; 0000 0219         }
0002cb 5f1f      	SUBI R17,-1
0002cc cff3      	RJMP _0x89
                 _0x8A:
                 ; 0000 021A         flag = 0;
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 93e0 01b4 	STS  _flag,R30
                 ; 0000 021B       }
                 ; 0000 021C 
                 ; 0000 021D       }
                 _0x85:
0002d0 cfe5      	RJMP _0x82
                 ; 0000 021E }
                 _0x8B:
0002d1 cfff      	RJMP _0x8B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000160           	.BYTE 0x20
                 _tx_buffer:
000180           	.BYTE 0x20
                 _isRising:
0001a0           	.BYTE 0x4
                 _isFalling:
0001a4           	.BYTE 0x4
                 _adcValue:
0001a8           	.BYTE 0x8
                 _OutVoltage:
0001b0           	.BYTE 0x4
                 _flag:
0001b4           	.BYTE 0x1
                 _isEnable:
0001b5           	.BYTE 0x1
                 _timeReg:
0001b6           	.BYTE 0x1
                 _lastFalling:
0001b7           	.BYTE 0x1
                 _regCounter:
0001b8           	.BYTE 0x1
                 _phaseCounter:
0001b9           	.BYTE 0x1
                 _old_test:
0001ba           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002d2 93ea      	ST   -Y,R30
0002d3 93fa      	ST   -Y,R31
0002d4 b7ef      	IN   R30,SREG
0002d5 93ea      	ST   -Y,R30
0002d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:70 WORDS
                 SUBOPT_0x1:
0002d7 920a      	ST   -Y,R0
0002d8 921a      	ST   -Y,R1
0002d9 92fa      	ST   -Y,R15
0002da 936a      	ST   -Y,R22
0002db 937a      	ST   -Y,R23
0002dc 938a      	ST   -Y,R24
0002dd 939a      	ST   -Y,R25
0002de 93aa      	ST   -Y,R26
0002df 93ba      	ST   -Y,R27
0002e0 93ea      	ST   -Y,R30
0002e1 93fa      	ST   -Y,R31
0002e2 b7ef      	IN   R30,SREG
0002e3 93ea      	ST   -Y,R30
0002e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0002e5 efef      	LDI  R30,LOW(255)
0002e6 bded      	OUT  0x2D,R30
0002e7 e4ea      	LDI  R30,LOW(74)
0002e8 bdec      	OUT  0x2C,R30
0002e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0002ea 2deb      	MOV  R30,R11
0002eb eaa8      	LDI  R26,LOW(_adcValue)
0002ec e0b1      	LDI  R27,HIGH(_adcValue)
0002ed e0f0      	LDI  R31,0
0002ee 0fee      	LSL  R30
0002ef 1fff      	ROL  R31
0002f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002f1 e1e9      	LDI  R30,LOW(25)
0002f2 e0f0      	LDI  R31,HIGH(25)
0002f3 15ec      	CP   R30,R12
0002f4 05fd      	CPC  R31,R13
0002f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0002f6 2deb      	MOV  R30,R11
0002f7 e0f0      	LDI  R31,0
0002f8 56e0      	SUBI R30,LOW(-_isRising)
0002f9 4ffe      	SBCI R31,HIGH(-_isRising)
0002fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0002fb 91e0 01b9 	LDS  R30,_phaseCounter
0002fd 5fef      	SUBI R30,-LOW(1)
0002fe 93e0 01b9 	STS  _phaseCounter,R30
000300 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000301 efeb      	LDI  R30,LOW(65531)
000302 efff      	LDI  R31,HIGH(65531)
000303 16ce      	CP   R12,R30
000304 06df      	CPC  R13,R31
000305 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000306 2deb      	MOV  R30,R11
000307 e0f0      	LDI  R31,0
000308 55ec      	SUBI R30,LOW(-_isFalling)
000309 4ffe      	SBCI R31,HIGH(-_isFalling)
00030a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x9:
00030b 91a0 01b0 	LDS  R26,_OutVoltage
00030d 91b0 01b1 	LDS  R27,_OutVoltage+1
00030f 9180 01b2 	LDS  R24,_OutVoltage+2
000311 9190 01b3 	LDS  R25,_OutVoltage+3
000313 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
000314 2fe1      	MOV  R30,R17
000315 eaa8      	LDI  R26,LOW(_adcValue)
000316 e0b1      	LDI  R27,HIGH(_adcValue)
000317 e0f0      	LDI  R31,0
000318 0fee      	LSL  R30
000319 1fff      	ROL  R31
00031a 0fae      	ADD  R26,R30
00031b 1fbf      	ADC  R27,R31
00031c 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
00031d 0fea      	ADD  R30,R26
00031e 1ffb      	ADC  R31,R27
00031f 1f68      	ADC  R22,R24
000320 1f79      	ADC  R23,R25
000321 9508      	RET
                 
                 __ASRW8:
000322 2fef      	MOV  R30,R31
000323 27ff      	CLR  R31
000324 fde7      	SBRC R30,7
000325 efff      	SER  R31
000326 9508      	RET
                 
                 __CWD1:
000327 2f6f      	MOV  R22,R31
000328 0f66      	ADD  R22,R22
000329 0b66      	SBC  R22,R22
00032a 2f76      	MOV  R23,R22
00032b 9508      	RET
                 
                 __GETW1P:
00032c 91ed      	LD   R30,X+
00032d 91fc      	LD   R31,X
00032e 9711      	SBIW R26,1
00032f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   6 
r8 :   5 r9 :   4 r10:   4 r11:  10 r12:   7 r13:   5 r14:   0 r15:   2 
r16:   4 r17:  12 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   5 
r24:  19 r25:  11 r26:  75 r27:  15 r28:   2 r29:   1 r30: 291 r31:  55 
x  :   8 y  :  43 z  :  20 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   5 
adiw  :   1 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   2 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   9 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  12 cpc   :  20 cpi   :  33 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   9 inc   :   7 jmp   :  22 ld    :  31 ldd   :   0 ldi   : 125 
lds   :  32 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  19 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  63 pop   :   0 push  :   0 rcall :  48 ret   :  17 
reti  :   2 rjmp  :  31 rol   :   2 ror   :   0 sbc   :   2 sbci  :   9 
sbi   :  14 sbic  :   1 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   1 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   6 sts   :  22 sub   :   2 subi  :  16 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000660   1580     52   1632   16384  10.0%
[.dseg] 0x000060 0x0001bb      0     91     91    1024   8.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
